// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: suppliers.sql

package db

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createSupplier = `-- name: CreateSupplier :one
INSERT INTO suppliers (tenant_id, name, contact_person, email, phone, address, tax_id, payment_mode, is_active)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9)
RETURNING id, tenant_id, name, contact_person, email, phone, address, tax_id, payment_mode, is_active
`

type CreateSupplierParams struct {
	TenantID      uuid.UUID   `json:"tenant_id"`
	Name          string      `json:"name"`
	ContactPerson pgtype.Text `json:"contact_person"`
	Email         pgtype.Text `json:"email"`
	Phone         pgtype.Text `json:"phone"`
	Address       pgtype.Text `json:"address"`
	TaxID         pgtype.Text `json:"tax_id"`
	PaymentMode   pgtype.Text `json:"payment_mode"`
	IsActive      pgtype.Bool `json:"is_active"`
}

func (q *Queries) CreateSupplier(ctx context.Context, arg CreateSupplierParams) (Supplier, error) {
	row := q.db.QueryRow(ctx, createSupplier,
		arg.TenantID,
		arg.Name,
		arg.ContactPerson,
		arg.Email,
		arg.Phone,
		arg.Address,
		arg.TaxID,
		arg.PaymentMode,
		arg.IsActive,
	)
	var i Supplier
	err := row.Scan(
		&i.ID,
		&i.TenantID,
		&i.Name,
		&i.ContactPerson,
		&i.Email,
		&i.Phone,
		&i.Address,
		&i.TaxID,
		&i.PaymentMode,
		&i.IsActive,
	)
	return i, err
}

const getSupplierByID = `-- name: GetSupplierByID :one
SELECT id, tenant_id, name, contact_person, email, phone, address, tax_id, payment_mode, is_active FROM suppliers
WHERE id = $1 AND tenant_id = $2
`

type GetSupplierByIDParams struct {
	ID       uuid.UUID `json:"id"`
	TenantID uuid.UUID `json:"tenant_id"`
}

func (q *Queries) GetSupplierByID(ctx context.Context, arg GetSupplierByIDParams) (Supplier, error) {
	row := q.db.QueryRow(ctx, getSupplierByID, arg.ID, arg.TenantID)
	var i Supplier
	err := row.Scan(
		&i.ID,
		&i.TenantID,
		&i.Name,
		&i.ContactPerson,
		&i.Email,
		&i.Phone,
		&i.Address,
		&i.TaxID,
		&i.PaymentMode,
		&i.IsActive,
	)
	return i, err
}

const listSuppliers = `-- name: ListSuppliers :many
SELECT id, tenant_id, name, contact_person, email, phone, address, tax_id, payment_mode, is_active FROM suppliers
WHERE tenant_id = $1 AND is_active = $2
ORDER BY name
LIMIT $3 OFFSET $4
`

type ListSuppliersParams struct {
	TenantID uuid.UUID   `json:"tenant_id"`
	IsActive pgtype.Bool `json:"is_active"`
	Limit    int32       `json:"limit"`
	Offset   int32       `json:"offset"`
}

func (q *Queries) ListSuppliers(ctx context.Context, arg ListSuppliersParams) ([]Supplier, error) {
	rows, err := q.db.Query(ctx, listSuppliers,
		arg.TenantID,
		arg.IsActive,
		arg.Limit,
		arg.Offset,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Supplier{}
	for rows.Next() {
		var i Supplier
		if err := rows.Scan(
			&i.ID,
			&i.TenantID,
			&i.Name,
			&i.ContactPerson,
			&i.Email,
			&i.Phone,
			&i.Address,
			&i.TaxID,
			&i.PaymentMode,
			&i.IsActive,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateSupplier = `-- name: UpdateSupplier :one
UPDATE suppliers
SET name = $2, contact_person = $3, email = $4, phone = $5, address = $6, tax_id = $7, payment_mode = $8, is_active = $9
WHERE id = $1 AND tenant_id = $10
RETURNING id, tenant_id, name, contact_person, email, phone, address, tax_id, payment_mode, is_active
`

type UpdateSupplierParams struct {
	ID            uuid.UUID   `json:"id"`
	Name          string      `json:"name"`
	ContactPerson pgtype.Text `json:"contact_person"`
	Email         pgtype.Text `json:"email"`
	Phone         pgtype.Text `json:"phone"`
	Address       pgtype.Text `json:"address"`
	TaxID         pgtype.Text `json:"tax_id"`
	PaymentMode   pgtype.Text `json:"payment_mode"`
	IsActive      pgtype.Bool `json:"is_active"`
	TenantID      uuid.UUID   `json:"tenant_id"`
}

func (q *Queries) UpdateSupplier(ctx context.Context, arg UpdateSupplierParams) (Supplier, error) {
	row := q.db.QueryRow(ctx, updateSupplier,
		arg.ID,
		arg.Name,
		arg.ContactPerson,
		arg.Email,
		arg.Phone,
		arg.Address,
		arg.TaxID,
		arg.PaymentMode,
		arg.IsActive,
		arg.TenantID,
	)
	var i Supplier
	err := row.Scan(
		&i.ID,
		&i.TenantID,
		&i.Name,
		&i.ContactPerson,
		&i.Email,
		&i.Phone,
		&i.Address,
		&i.TaxID,
		&i.PaymentMode,
		&i.IsActive,
	)
	return i, err
}
