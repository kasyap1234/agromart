// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: locations.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createLocation = `-- name: CreateLocation :one
INSERT INTO locations (tenant_id, name, address, city, state, postal_code, country, phone, email, location_type, is_active, notes)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12)
RETURNING id, tenant_id, name, address, city, state, postal_code, country, phone, email, location_type, is_active, notes, created_at, updated_at
`

type CreateLocationParams struct {
	TenantID     pgtype.UUID
	Name         string
	Address      pgtype.Text
	City         pgtype.Text
	State        pgtype.Text
	PostalCode   pgtype.Text
	Country      pgtype.Text
	Phone        pgtype.Text
	Email        pgtype.Text
	LocationType string
	IsActive     bool
	Notes        pgtype.Text
}

func (q *Queries) CreateLocation(ctx context.Context, arg CreateLocationParams) (Location, error) {
	row := q.db.QueryRow(ctx, createLocation,
		arg.TenantID,
		arg.Name,
		arg.Address,
		arg.City,
		arg.State,
		arg.PostalCode,
		arg.Country,
		arg.Phone,
		arg.Email,
		arg.LocationType,
		arg.IsActive,
		arg.Notes,
	)
	var i Location
	err := row.Scan(
		&i.ID,
		&i.TenantID,
		&i.Name,
		&i.Address,
		&i.City,
		&i.State,
		&i.PostalCode,
		&i.Country,
		&i.Phone,
		&i.Email,
		&i.LocationType,
		&i.IsActive,
		&i.Notes,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getLocationByID = `-- name: GetLocationByID :one
SELECT id, tenant_id, name, address, city, state, postal_code, country, phone, email, location_type, is_active, notes, created_at, updated_at FROM locations
WHERE id = $1 AND tenant_id = $2
`

type GetLocationByIDParams struct {
	ID       pgtype.UUID
	TenantID pgtype.UUID
}

func (q *Queries) GetLocationByID(ctx context.Context, arg GetLocationByIDParams) (Location, error) {
	row := q.db.QueryRow(ctx, getLocationByID, arg.ID, arg.TenantID)
	var i Location
	err := row.Scan(
		&i.ID,
		&i.TenantID,
		&i.Name,
		&i.Address,
		&i.City,
		&i.State,
		&i.PostalCode,
		&i.Country,
		&i.Phone,
		&i.Email,
		&i.LocationType,
		&i.IsActive,
		&i.Notes,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listLocations = `-- name: ListLocations :many
SELECT id, tenant_id, name, address, city, state, postal_code, country, phone, email, location_type, is_active, notes, created_at, updated_at FROM locations
WHERE tenant_id = $1 AND location_type = $2 AND is_active = $3
ORDER BY name
LIMIT $4 OFFSET $5
`

type ListLocationsParams struct {
	TenantID     pgtype.UUID
	LocationType string
	IsActive     bool
	Limit        int32
	Offset       int32
}

func (q *Queries) ListLocations(ctx context.Context, arg ListLocationsParams) ([]Location, error) {
	rows, err := q.db.Query(ctx, listLocations,
		arg.TenantID,
		arg.LocationType,
		arg.IsActive,
		arg.Limit,
		arg.Offset,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Location
	for rows.Next() {
		var i Location
		if err := rows.Scan(
			&i.ID,
			&i.TenantID,
			&i.Name,
			&i.Address,
			&i.City,
			&i.State,
			&i.PostalCode,
			&i.Country,
			&i.Phone,
			&i.Email,
			&i.LocationType,
			&i.IsActive,
			&i.Notes,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateLocation = `-- name: UpdateLocation :one
UPDATE locations
SET name = $2, address = $3, city = $4, state = $5, postal_code = $6, country = $7, phone = $8, email = $9, location_type = $10, is_active = $11, notes = $12, updated_at = NOW()
WHERE id = $1 AND tenant_id = $13
RETURNING id, tenant_id, name, address, city, state, postal_code, country, phone, email, location_type, is_active, notes, created_at, updated_at
`

type UpdateLocationParams struct {
	ID           pgtype.UUID
	Name         string
	Address      pgtype.Text
	City         pgtype.Text
	State        pgtype.Text
	PostalCode   pgtype.Text
	Country      pgtype.Text
	Phone        pgtype.Text
	Email        pgtype.Text
	LocationType string
	IsActive     bool
	Notes        pgtype.Text
	TenantID     pgtype.UUID
}

func (q *Queries) UpdateLocation(ctx context.Context, arg UpdateLocationParams) (Location, error) {
	row := q.db.QueryRow(ctx, updateLocation,
		arg.ID,
		arg.Name,
		arg.Address,
		arg.City,
		arg.State,
		arg.PostalCode,
		arg.Country,
		arg.Phone,
		arg.Email,
		arg.LocationType,
		arg.IsActive,
		arg.Notes,
		arg.TenantID,
	)
	var i Location
	err := row.Scan(
		&i.ID,
		&i.TenantID,
		&i.Name,
		&i.Address,
		&i.City,
		&i.State,
		&i.PostalCode,
		&i.Country,
		&i.Phone,
		&i.Email,
		&i.LocationType,
		&i.IsActive,
		&i.Notes,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
