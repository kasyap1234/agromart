// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: tenants.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createTenant = `-- name: CreateTenant :one
INSERT INTO tenants (name, email, phone, address, registration_number)
VALUES ($1, $2, $3, $4, $5)
RETURNING id, name, email, phone, address, registration_number, is_active, created_at
`

type CreateTenantParams struct {
	Name               string
	Email              string
	Phone              string
	Address            pgtype.Text
	RegistrationNumber pgtype.Text
}

func (q *Queries) CreateTenant(ctx context.Context, arg CreateTenantParams) (Tenant, error) {
	row := q.db.QueryRow(ctx, createTenant,
		arg.Name,
		arg.Email,
		arg.Phone,
		arg.Address,
		arg.RegistrationNumber,
	)
	var i Tenant
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Phone,
		&i.Address,
		&i.RegistrationNumber,
		&i.IsActive,
		&i.CreatedAt,
	)
	return i, err
}

const getTenantByID = `-- name: GetTenantByID :one
SELECT id, name, email, phone, address, registration_number, is_active, created_at FROM tenants
WHERE id = $1
`

func (q *Queries) GetTenantByID(ctx context.Context, id pgtype.UUID) (Tenant, error) {
	row := q.db.QueryRow(ctx, getTenantByID, id)
	var i Tenant
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Phone,
		&i.Address,
		&i.RegistrationNumber,
		&i.IsActive,
		&i.CreatedAt,
	)
	return i, err
}

const listTenants = `-- name: ListTenants :many
SELECT id, name, email, phone, address, registration_number, is_active, created_at FROM tenants
ORDER BY created_at DESC
LIMIT $1 OFFSET $2
`

type ListTenantsParams struct {
	Limit  int32
	Offset int32
}

func (q *Queries) ListTenants(ctx context.Context, arg ListTenantsParams) ([]Tenant, error) {
	rows, err := q.db.Query(ctx, listTenants, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Tenant
	for rows.Next() {
		var i Tenant
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Email,
			&i.Phone,
			&i.Address,
			&i.RegistrationNumber,
			&i.IsActive,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateTenant = `-- name: UpdateTenant :one
UPDATE tenants
SET name = $2, email = $3, phone = $4, address = $5, registration_number = $6, is_active = $7
WHERE id = $1
RETURNING id, name, email, phone, address, registration_number, is_active, created_at
`

type UpdateTenantParams struct {
	ID                 pgtype.UUID
	Name               string
	Email              string
	Phone              string
	Address            pgtype.Text
	RegistrationNumber pgtype.Text
	IsActive           bool
}

func (q *Queries) UpdateTenant(ctx context.Context, arg UpdateTenantParams) (Tenant, error) {
	row := q.db.QueryRow(ctx, updateTenant,
		arg.ID,
		arg.Name,
		arg.Email,
		arg.Phone,
		arg.Address,
		arg.RegistrationNumber,
		arg.IsActive,
	)
	var i Tenant
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Phone,
		&i.Address,
		&i.RegistrationNumber,
		&i.IsActive,
		&i.CreatedAt,
	)
	return i, err
}
