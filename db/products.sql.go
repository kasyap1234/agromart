// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: products.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createProduct = `-- name: CreateProduct :one
INSERT INTO products (tenant_id, sku, name, price, description, image_url, brand, unit_id, price_per_unit, gst_percent)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10)
RETURNING id, tenant_id, sku, name, price, description, image_url, brand, unit_id, price_per_unit, gst_percent, created_at
`

type CreateProductParams struct {
	TenantID     pgtype.UUID
	Sku          string
	Name         string
	Price        pgtype.Numeric
	Description  pgtype.Text
	ImageUrl     pgtype.Text
	Brand        pgtype.Text
	UnitID       pgtype.UUID
	PricePerUnit pgtype.Numeric
	GstPercent   pgtype.Numeric
}

func (q *Queries) CreateProduct(ctx context.Context, arg CreateProductParams) (Product, error) {
	row := q.db.QueryRow(ctx, createProduct,
		arg.TenantID,
		arg.Sku,
		arg.Name,
		arg.Price,
		arg.Description,
		arg.ImageUrl,
		arg.Brand,
		arg.UnitID,
		arg.PricePerUnit,
		arg.GstPercent,
	)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.TenantID,
		&i.Sku,
		&i.Name,
		&i.Price,
		&i.Description,
		&i.ImageUrl,
		&i.Brand,
		&i.UnitID,
		&i.PricePerUnit,
		&i.GstPercent,
		&i.CreatedAt,
	)
	return i, err
}

const createUnit = `-- name: CreateUnit :one
INSERT INTO units (tenant_id, name, abbreviation)
VALUES ($1, $2, $3)
RETURNING id, tenant_id, name, abbreviation, created_at
`

type CreateUnitParams struct {
	TenantID     pgtype.UUID
	Name         string
	Abbreviation string
}

func (q *Queries) CreateUnit(ctx context.Context, arg CreateUnitParams) (Unit, error) {
	row := q.db.QueryRow(ctx, createUnit, arg.TenantID, arg.Name, arg.Abbreviation)
	var i Unit
	err := row.Scan(
		&i.ID,
		&i.TenantID,
		&i.Name,
		&i.Abbreviation,
		&i.CreatedAt,
	)
	return i, err
}

const getProductBySKU = `-- name: GetProductBySKU :one
SELECT id, tenant_id, sku, name, price, description, image_url, brand, unit_id, price_per_unit, gst_percent, created_at FROM products
WHERE sku = $1 AND tenant_id = $2
`

type GetProductBySKUParams struct {
	Sku      string
	TenantID pgtype.UUID
}

func (q *Queries) GetProductBySKU(ctx context.Context, arg GetProductBySKUParams) (Product, error) {
	row := q.db.QueryRow(ctx, getProductBySKU, arg.Sku, arg.TenantID)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.TenantID,
		&i.Sku,
		&i.Name,
		&i.Price,
		&i.Description,
		&i.ImageUrl,
		&i.Brand,
		&i.UnitID,
		&i.PricePerUnit,
		&i.GstPercent,
		&i.CreatedAt,
	)
	return i, err
}

const listProducts = `-- name: ListProducts :many
SELECT id, tenant_id, sku, name, price, description, image_url, brand, unit_id, price_per_unit, gst_percent, created_at FROM products
WHERE tenant_id = $1
ORDER BY created_at DESC
LIMIT $2 OFFSET $3
`

type ListProductsParams struct {
	TenantID pgtype.UUID
	Limit    int32
	Offset   int32
}

func (q *Queries) ListProducts(ctx context.Context, arg ListProductsParams) ([]Product, error) {
	rows, err := q.db.Query(ctx, listProducts, arg.TenantID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Product
	for rows.Next() {
		var i Product
		if err := rows.Scan(
			&i.ID,
			&i.TenantID,
			&i.Sku,
			&i.Name,
			&i.Price,
			&i.Description,
			&i.ImageUrl,
			&i.Brand,
			&i.UnitID,
			&i.PricePerUnit,
			&i.GstPercent,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
