// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: customers.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createCustomer = `-- name: CreateCustomer :one
INSERT INTO customers (tenant_id, name, contact_person, email, phone, address, payment_mode, is_active)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8)
RETURNING id, tenant_id, name, contact_person, email, phone, address, payment_mode, is_active, created_at, updated_at
`

type CreateCustomerParams struct {
	TenantID      pgtype.UUID
	Name          string
	ContactPerson pgtype.Text
	Email         pgtype.Text
	Phone         pgtype.Text
	Address       pgtype.Text
	PaymentMode   pgtype.Text
	IsActive      pgtype.Bool
}

func (q *Queries) CreateCustomer(ctx context.Context, arg CreateCustomerParams) (Customer, error) {
	row := q.db.QueryRow(ctx, createCustomer,
		arg.TenantID,
		arg.Name,
		arg.ContactPerson,
		arg.Email,
		arg.Phone,
		arg.Address,
		arg.PaymentMode,
		arg.IsActive,
	)
	var i Customer
	err := row.Scan(
		&i.ID,
		&i.TenantID,
		&i.Name,
		&i.ContactPerson,
		&i.Email,
		&i.Phone,
		&i.Address,
		&i.PaymentMode,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getCustomerByID = `-- name: GetCustomerByID :one
SELECT id, tenant_id, name, contact_person, email, phone, address, payment_mode, is_active, created_at, updated_at FROM customers
WHERE id = $1 AND tenant_id = $2
`

type GetCustomerByIDParams struct {
	ID       pgtype.UUID
	TenantID pgtype.UUID
}

func (q *Queries) GetCustomerByID(ctx context.Context, arg GetCustomerByIDParams) (Customer, error) {
	row := q.db.QueryRow(ctx, getCustomerByID, arg.ID, arg.TenantID)
	var i Customer
	err := row.Scan(
		&i.ID,
		&i.TenantID,
		&i.Name,
		&i.ContactPerson,
		&i.Email,
		&i.Phone,
		&i.Address,
		&i.PaymentMode,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listCustomers = `-- name: ListCustomers :many
SELECT id, tenant_id, name, contact_person, email, phone, address, payment_mode, is_active, created_at, updated_at FROM customers
WHERE tenant_id = $1 AND is_active = $2
ORDER BY name
LIMIT $3 OFFSET $4
`

type ListCustomersParams struct {
	TenantID pgtype.UUID
	IsActive pgtype.Bool
	Limit    int32
	Offset   int32
}

func (q *Queries) ListCustomers(ctx context.Context, arg ListCustomersParams) ([]Customer, error) {
	rows, err := q.db.Query(ctx, listCustomers,
		arg.TenantID,
		arg.IsActive,
		arg.Limit,
		arg.Offset,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Customer
	for rows.Next() {
		var i Customer
		if err := rows.Scan(
			&i.ID,
			&i.TenantID,
			&i.Name,
			&i.ContactPerson,
			&i.Email,
			&i.Phone,
			&i.Address,
			&i.PaymentMode,
			&i.IsActive,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateCustomer = `-- name: UpdateCustomer :one
UPDATE customers
SET name = $2, contact_person = $3, email = $4, phone = $5, address = $6, payment_mode = $7, is_active = $8, updated_at = NOW()
WHERE id = $1 AND tenant_id = $9
RETURNING id, tenant_id, name, contact_person, email, phone, address, payment_mode, is_active, created_at, updated_at
`

type UpdateCustomerParams struct {
	ID            pgtype.UUID
	Name          string
	ContactPerson pgtype.Text
	Email         pgtype.Text
	Phone         pgtype.Text
	Address       pgtype.Text
	PaymentMode   pgtype.Text
	IsActive      pgtype.Bool
	TenantID      pgtype.UUID
}

func (q *Queries) UpdateCustomer(ctx context.Context, arg UpdateCustomerParams) (Customer, error) {
	row := q.db.QueryRow(ctx, updateCustomer,
		arg.ID,
		arg.Name,
		arg.ContactPerson,
		arg.Email,
		arg.Phone,
		arg.Address,
		arg.PaymentMode,
		arg.IsActive,
		arg.TenantID,
	)
	var i Customer
	err := row.Scan(
		&i.ID,
		&i.TenantID,
		&i.Name,
		&i.ContactPerson,
		&i.Email,
		&i.Phone,
		&i.Address,
		&i.PaymentMode,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
