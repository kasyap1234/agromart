version: "3"

# Load env variables from .env file
dotenv: [".env"]

vars:
  OUTPUT_DIR: bin
  BACKEND_PATH: ./cmd/api
  MIGRATIONS_DIR: apps/server/sql/schema

  # These come from .env and will be available as vars
  DATABASE_URL: "postgres://{{.APP_DB_USER}}:{{.APP_DB_PASSWORD}}@{{.APP_DB_HOST}}:{{.APP_DB_PORT}}/{{.APP_DB_NAME}}?sslmode=disable"

tasks:
  default:
    cmds:
      - echo "Hello Agromart"
    silent: true

  # üõ†Ô∏è Build Tasks
  build:
    internal: true
    vars:
      GOOS: '{{.GOOS | default "linux"}}'
      GOARCH: '{{.GOARCH | default "amd64"}}'
      OUTPUT: '{{.OUTPUT | default "api"}}'
    cmds:
      - mkdir -p {{.OUTPUT_DIR}}
      - cd apps/server && GOOS={{.GOOS}} GOARCH={{.GOARCH}} go build -o ../../{{.OUTPUT_DIR}}/{{.OUTPUT}} {{.BACKEND_PATH}}

  build:mac:
    desc: "Build for macOS (Apple Silicon)"
    cmds:
      - task: build
        vars:
          GOOS: darwin
          GOARCH: arm64
          OUTPUT: api-mac-arm64

  build:linux:
    desc: "Build for Linux (x86_64)"
    cmds:
      - task: build
        vars:
          GOOS: linux
          GOARCH: amd64
          OUTPUT: api-linux-amd64

  build:graviton:
    desc: "Build for AWS Graviton (Linux ARM64)"
    cmds:
      - task: build
        vars:
          GOOS: linux
          GOARCH: arm64
          OUTPUT: api-linux-arm64

  build:all:
    desc: "Build entire application locally (frontend + backend)"
    cmds:
      - echo "üèóÔ∏è  Building Agromart Application..."
      - echo "üì¶ Installing frontend dependencies..."
      - cd apps/client && npm install
      - echo "üé® Installing Tailwind CSS plugins..."
      - cd apps/client && npm install @tailwindcss/forms @tailwindcss/typography @tailwindcss/aspect-ratio --silent
      - echo "üî® Building frontend..."
      - cd apps/client && npm run build
      - echo "üîß Building backend..."
      - task: build
        vars:
          OUTPUT: agromart
      - echo "‚úÖ Build complete! Frontend built in apps/client/.next and backend binary in bin/agromart"

  # üöÄ Development Tasks
  dev:preview:
    desc: "Run development preview of entire application (frontend + backend)"
    deps: [run:db-dev]
    cmds:
      - echo "üöÄ Starting Agromart Development Preview..."
      - echo "üì¶ Installing frontend dependencies..."
      - cd apps/client && npm install
      - echo "üé® Installing Tailwind CSS plugins..."
      - cd apps/client && npm install @tailwindcss/forms @tailwindcss/typography @tailwindcss/aspect-ratio --silent
      - echo "üîÑ Generating SQL code..."
      - task: sqlc-generate
      - echo "üóÑÔ∏è  Running database migrations..."
      - task: migrate:up
      - echo "üéØ Starting backend server (port 8080)..."
      - cd apps/server && nohup go run {{.BACKEND_PATH}} > /tmp/agromart_backend.log 2>&1 & echo $! > /tmp/agromart_backend.pid
      - sleep 3
      - echo "üåê Starting frontend development server (port 3000)..."
      - echo "‚úÖ Application running at:"
      - echo "  Frontend - http://localhost:3000"
      - echo "  Backend  - http://localhost:8080"
      - echo "  Database - localhost:5432"
      - echo ""
      - echo "üí° Backend logs - tail -f /tmp/agromart_backend.log"
      - echo "üõë To stop - task dev:stop"
      - echo ""
      - echo "Press Ctrl+C to stop frontend (backend will keep running)"
      - cd apps/client && npm run dev

  dev:stop:
    desc: "Stop development preview services"
    cmds:
      - echo "üõë Stopping development services..."
      - |
        if [ -f /tmp/agromart_backend.pid ]; then
          PID=$(cat /tmp/agromart_backend.pid)
          if kill -0 $PID 2>/dev/null; then
            echo "Stopping backend server (PID: $PID)..."
            kill $PID 2>/dev/null || true
            sleep 2
            kill -9 $PID 2>/dev/null || true
          fi
          rm -f /tmp/agromart_backend.pid
        fi
      - |
        echo "Stopping frontend development server..."
        pkill -f "next dev" 2>/dev/null || true
      - task: stop:db-dev
      - |
        echo "Cleaning up log files..."
        rm -f /tmp/agromart_backend.log
      - echo "‚úÖ All services stopped"

  # üß± Database Migrations
  migrate:up:
    desc: Run all up migrations
    env:
      DATABASE_URL: "{{.DATABASE_URL}}"
    cmds:
      - migrate -path {{.MIGRATIONS_DIR}} -database "$DATABASE_URL" up

  migrate:down:
    desc: Roll back latest migration
    env:
      DATABASE_URL: "{{.DATABASE_URL}}"
    cmds:
      - migrate -path {{.MIGRATIONS_DIR}} -database "$DATABASE_URL" down 1

  migrate:create:
    desc: Create a new migration (e.g. task migrate:create NAME=create_inventory_tables)
    requires:
      vars: ["NAME"]
    cmds:
      - mkdir -p {{.MIGRATIONS_DIR}}
      - migrate create -ext sql -seq -dir {{.MIGRATIONS_DIR}} {{.NAME}}

  # üê≥ Dev Database
  run:db-dev:
    desc: Start Postgres container
    cmds:
      - docker compose -f docker-compose.db.yml up -d

  # üì¶ SQLC
  sqlc-generate:
    desc: Generate SQL code using sqlc
    cmds:
      - sqlc generate

  stop:db-dev:
    desc: Stop the Postgres container
    cmds:
      - docker compose -f docker-compose.db.yml stop db

  rm:db-dev:
    desc: Stop and remove Postgres container and volume
    cmds:
      - docker compose -f docker-compose.db.yml down -v
