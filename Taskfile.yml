version: "3"

# Load env variables from .env file
dotenv: [".env"]

vars:
  OUTPUT_DIR: bin
  BACKEND_PATH: ./cmd/api
  MIGRATIONS_DIR: apps/server/sql/schema

  # These come from .env and will be available as vars
  DATABASE_URL: "postgres://{{.APP_DB_USER}}:{{.APP_DB_PASSWORD}}@{{.APP_DB_HOST}}:{{.APP_DB_PORT}}/{{.APP_DB_NAME}}?sslmode=disable"

tasks:
  default:
    cmds:
      - echo "Hello Agromart"
    silent: true

  # üõ†Ô∏è Build Tasks
  build:
    internal: true
    vars:
      GOOS: '{{.GOOS | default "linux"}}'
      GOARCH: '{{.GOARCH | default "amd64"}}'
      OUTPUT: '{{.OUTPUT | default "api"}}'
    cmds:
      - mkdir -p {{.OUTPUT_DIR}}
      - cd apps/server && GOOS={{.GOOS}} GOARCH={{.GOARCH}} go build -o ../../{{.OUTPUT_DIR}}/{{.OUTPUT}} {{.BACKEND_PATH}}

  build:mac:
    desc: "Build for macOS (Apple Silicon)"
    cmds:
      - task: build
        vars:
          GOOS: darwin
          GOARCH: arm64
          OUTPUT: api-mac-arm64

  build:linux:
    desc: "Build for Linux (x86_64)"
    cmds:
      - task: build
        vars:
          GOOS: linux
          GOARCH: amd64
          OUTPUT: api-linux-amd64

  build:graviton:
    desc: "Build for AWS Graviton (Linux ARM64)"
    cmds:
      - task: build
        vars:
          GOOS: linux
          GOARCH: arm64
          OUTPUT: api-linux-arm64

  # üß± Database Migrations
  migrate:up:
    desc: Run all up migrations
    env:
      DATABASE_URL: "{{.DATABASE_URL}}"
    cmds:
      - migrate -path {{.MIGRATIONS_DIR}} -database "$DATABASE_URL" up

  migrate:down:
    desc: Roll back latest migration
    env:
      DATABASE_URL: "{{.DATABASE_URL}}"
    cmds:
      - migrate -path {{.MIGRATIONS_DIR}} -database "$DATABASE_URL" down 1

  migrate:create:
    desc: Create a new migration (e.g. task migrate:create NAME=create_inventory_tables)
    requires:
      vars: ["NAME"]
    cmds:
      - mkdir -p {{.MIGRATIONS_DIR}}
      - migrate create -ext sql -seq -dir {{.MIGRATIONS_DIR}} {{.NAME}}

  # üê≥ Dev Database
  run:db-dev:
    desc: Start Postgres container
    cmds:
      - docker compose -f docker-compose.db.yml up -d

  # üì¶ SQLC
  sqlc-generate:
    desc: Generate SQL code using sqlc
    cmds:
      - sqlc generate
  stop:db-dev:
    desc: Stop the Postgres container
    cmds:
      - docker compose -f docker-compose.db.yml stop db

  rm:db-dev:
    desc: Stop and remove Postgres container and volume
    cmds:
      - docker compose -f docker-compose.db.yml down -v
